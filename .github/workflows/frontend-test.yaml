name: Frontend Test

on:
  pull_request:

jobs:
  check_code:
    runs-on: ubuntu-latest
    outputs:
      code-change: ${{ steps.filter.outputs.frontend }}
#not required for pull requests
    # steps:
    #   - name: checkout-code
    #     uses: actions/checkout@v4
    steps:
      - name: path-check
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'src/frontend/**'
              - '.github/workflows/frontend-test.yaml'
  test:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: check_code
    if: ${{ needs.check_code.outputs.code-change == 'true' }}
    defaults:
      run:
        working-directory: ./src/frontend
    steps: 
      - name: checkout-code
        uses: actions/checkout@v4

      - name: Install UV
        uses: astral-sh/setup-uv@v5

      - name: Set up Python
        run: uv python install

      - name: Sync uv dependencies
        run: uv sync --dev
      
      - name: Check code format with ruff
        uses: astral-sh/ruff-action@v3
        with:
          args: "format --check --diff"

      - name: Run tests for frontend
        run: uv run pytest tests/ -v --cov=src/frontend --cov-report=xml --cov-fail-under=80 

      - name: Upload artifact coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage.xml
          path: ./src/frontend/coverage.xml
          retention-days: 7
      
      - name: Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./src/frontend/coverage.xml
          badge: true
          format: markdown
          output: both

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: test-coverage-frontend
          recreate: true
          path: code-coverage-results.md
  
  docker-image:
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: './src/frontend'
    steps:
      - name: checkout-code
        uses: actions/checkout@v4
        
      - name: build docker image
        run: |
          docker build -t frontend .
      
      - name: set up trivy scanning
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'frontend'
          format: 'sarif'
          exit-code: "0"
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          vuln-type: "os,library"
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'



        
